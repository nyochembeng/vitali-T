import React, { useState } from "react";
import { View, StyleSheet, ScrollView, TextInput } from "react-native";
import { Text, Button, Card } from "react-native-paper";
import { SafeAreaView } from "react-native-safe-area-context";
import { MaterialIcons } from "@expo/vector-icons";
import { useRouter } from "expo-router";
import CustomAppBar from "@/components/utils/CustomAppBar";

interface AlertDetailsProps {
  route?: {
    params: {
      alertType: string;
      value: string;
      timestamp: string;
      safeRange: string;
      riskLevel: string;
      recommendedAction: string;
    };
  };
}

const AlertDetailsScreen: React.FC<AlertDetailsProps> = ({ route }) => {
  const [notes, setNotes] = useState("");
  const router = useRouter();

  // Default data (replace with route params in real implementation)
  const alertData = route?.params || {
    alertType: "High Blood Pressure",
    value: "150/95 mmHg",
    timestamp: "Today, 2:30 PM",
    safeRange: "Below 130/85 mmHg",
    riskLevel: "Moderate",
    recommendedAction:
      "Contact your healthcare provider if symptoms persist. Monitor your blood pressure every 2 hours.",
  };

  const shareData = {
    message: `ðŸš¨ Vitali-T Health Alert\n\nAlert Type: ${alertData.alertType}\nValue: ${alertData.value}\nTime: ${alertData.timestamp}\nRisk Level: ${alertData.riskLevel}\nSafe Range: ${alertData.safeRange}\nRecommended Action: ${alertData.recommendedAction}\n${notes ? `Additional Notes: ${notes}` : ""}\n\nGenerated by Vitali-T - Maternal Health Monitoring`,
    title: `Vitali-T Alert: ${alertData.alertType}`,
  };

  const handleMarkAsAcknowledged = () => {
    // Add acknowledgment logic
    console.log("Alert marked as acknowledged");
    router.back();
  };

  return (
    <SafeAreaView style={styles.container}>
      <CustomAppBar
        title="Alert Details"
        rightAction="share"
        shareData={shareData}
      />

      <ScrollView
        style={styles.content}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.scrollContent}
      >
        {/* Alert Icon */}
        <View style={styles.alertIconContainer}>
          <View style={styles.alertIcon}>
            <MaterialIcons name="warning" size={32} color="#FF6B35" />
          </View>
        </View>

        {/* Alert Title and Value */}
        <Text style={styles.alertTitle}>{alertData.alertType}</Text>
        <Text style={styles.alertValue}>{alertData.value}</Text>
        <Text style={styles.timestamp}>{alertData.timestamp}</Text>

        {/* Safe Range */}
        <Card style={styles.infoCard}>
          <Card.Content style={styles.infoContent}>
            <MaterialIcons name="check-circle" size={20} color="#4CAF50" />
            <View style={styles.infoText}>
              <Text style={styles.infoTitle}>Safe Range</Text>
              <Text style={styles.infoValue}>{alertData.safeRange}</Text>
            </View>
          </Card.Content>
        </Card>

        {/* Risk Level */}
        <Card style={styles.infoCard}>
          <Card.Content style={styles.infoContent}>
            <MaterialIcons name="assessment" size={20} color="#FF9800" />
            <View style={styles.infoText}>
              <Text style={styles.infoTitle}>Risk Level</Text>
              <Text style={styles.infoValue}>{alertData.riskLevel}</Text>
            </View>
          </Card.Content>
        </Card>

        {/* Recommended Action */}
        <Card style={styles.actionCard}>
          <Card.Content>
            <View style={styles.actionHeader}>
              <MaterialIcons name="lightbulb" size={20} color="#8B4513" />
              <Text style={styles.actionTitle}>Recommended Action</Text>
            </View>
            <Text style={styles.actionText}>{alertData.recommendedAction}</Text>
          </Card.Content>
        </Card>

        {/* Additional Notes */}
        <View style={styles.notesSection}>
          <Text style={styles.notesTitle}>Additional Notes</Text>
          <TextInput
            style={styles.notesInput}
            placeholder="Add any relevant notes about this alert..."
            value={notes}
            onChangeText={setNotes}
            multiline
            numberOfLines={4}
            textAlignVertical="top"
          />
        </View>
      </ScrollView>

      {/* Mark as Acknowledged Button */}
      <View style={styles.buttonContainer}>
        <Button
          mode="contained"
          style={styles.acknowledgeButton}
          labelStyle={styles.acknowledgeButtonText}
          onPress={handleMarkAsAcknowledged}
        >
          Mark as Acknowledged
        </Button>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingHorizontal: 8,
    paddingVertical: 8,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#333",
  },
  content: {
    flex: 1,
  },
  scrollContent: {
    padding: 16,
    paddingBottom: 32,
  },
  alertIconContainer: {
    alignItems: "center",
    marginBottom: 24,
  },
  alertIcon: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: "#FFF5F5",
    justifyContent: "center",
    alignItems: "center",
    borderWidth: 2,
    borderColor: "#FFE5E5",
  },
  alertTitle: {
    fontSize: 20,
    fontWeight: "600",
    color: "#333",
    textAlign: "center",
    marginBottom: 8,
  },
  alertValue: {
    fontSize: 28,
    fontWeight: "700",
    color: "#FF6B35",
    textAlign: "center",
    marginBottom: 8,
  },
  timestamp: {
    fontSize: 16,
    color: "#666",
    textAlign: "center",
    marginBottom: 32,
  },
  infoCard: {
    marginBottom: 12,
    backgroundColor: "#f8f8f8",
    elevation: 0,
  },
  infoContent: {
    flexDirection: "row",
    alignItems: "center",
  },
  infoText: {
    marginLeft: 12,
    flex: 1,
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: "#333",
    marginBottom: 4,
  },
  infoValue: {
    fontSize: 14,
    color: "#666",
  },
  actionCard: {
    marginVertical: 12,
    backgroundColor: "#f8f8f8",
    elevation: 0,
  },
  actionHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 12,
  },
  actionTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: "#333",
    marginLeft: 8,
  },
  actionText: {
    fontSize: 14,
    color: "#666",
    lineHeight: 20,
  },
  notesSection: {
    marginTop: 24,
  },
  notesTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: "#333",
    marginBottom: 12,
  },
  notesInput: {
    borderWidth: 1,
    borderColor: "#e0e0e0",
    borderRadius: 8,
    padding: 12,
    fontSize: 14,
    color: "#333",
    backgroundColor: "#f8f8f8",
    minHeight: 100,
  },
  buttonContainer: {
    padding: 16,
    paddingBottom: 32,
  },
  acknowledgeButton: {
    backgroundColor: "#8B4513",
    borderRadius: 25,
    paddingVertical: 8,
  },
  acknowledgeButtonText: {
    fontSize: 16,
    fontWeight: "600",
    color: "#fff",
  },
});

export default AlertDetailsScreen;
