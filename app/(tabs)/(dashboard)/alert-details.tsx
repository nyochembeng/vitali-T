import CustomAppBar from "@/components/utils/CustomAppBar";
import { useTheme } from "@/lib/hooks/useTheme";
import { useAuth } from "@/lib/hooks/useAuth";
import { Alert, alertSchema } from "@/lib/schemas/alertSchema";
import { MaterialIcons } from "@expo/vector-icons";
import { useRouter } from "expo-router";
import React, { useState } from "react";
import { ScrollView, TextInput, View } from "react-native";
import { Button, Card, Text, Portal, Dialog } from "react-native-paper";
import { SafeAreaView } from "react-native-safe-area-context";
import {
  useGetAlertQuery,
  useUpdateAlertMutation,
} from "@/lib/features/alerts/alertService";
import Toast from "react-native-toast-message";
import * as Haptics from "expo-haptics";

interface AlertDetailsProps {
  route?: {
    params: {
      alertId: string;
      userId: string;
      deviceId: string;
      alertType: string;
      value: string;
      timestamp: string;
      safeRange: string;
      riskLevel: "Low" | "Moderate" | "High";
      recommendedAction: string;
      notes?: string;
      acknowledged: string; // Serialized as string
    };
  };
}

const AlertDetailsScreen: React.FC<AlertDetailsProps> = ({ route }) => {
  const router = useRouter();
  const { colors, typo, layout } = useTheme();
  const { user, isActionQueued } = useAuth();
  const [notes, setNotes] = useState(route?.params.notes || "");
  const [showSuccessDialog, setShowSuccessDialog] = useState(false);
  const [updateAlert, { isLoading: isUpdating }] = useUpdateAlertMutation();

  const alertId = route?.params.alertId;
  const {
    data: alertData,
    isLoading: isFetching,
    isError,
  } = useGetAlertQuery(
    { userId: user?.userId as string, alertId: alertId as string },
    { skip: !user?.userId || !alertId }
  );

  // Fallback to mock data if query fails or no data is available
  const resolvedAlertData = (() => {
    if (alertData) {
      return alertData;
    }
    try {
      const parsedParams = {
        ...route?.params,
        acknowledged: route?.params.acknowledged === "true",
      };
      return alertSchema.parse(parsedParams);
    } catch {
      return {
        alertId: "mock-alert-001",
        userId: user?.userId || "user_1234567890",
        deviceId: "VT-001",
        alertType: "High Blood Pressure",
        value: "150/95 mmHg",
        timestamp: new Date().toISOString(),
        safeRange: "Below 130/85 mmHg",
        riskLevel: "Moderate",
        recommendedAction:
          "Contact your healthcare provider if symptoms persist. Monitor your blood pressure every 2 hours.",
        notes: "",
        acknowledged: false,
      } as Alert;
    }
  })();

  const shareData = {
    message: `ðŸš¨ Vitali-T Health Alert\n\nAlert Type: ${resolvedAlertData.alertType}\nValue: ${resolvedAlertData.value}\nTime: ${new Date(resolvedAlertData.timestamp).toLocaleString()}\nRisk Level: ${resolvedAlertData.riskLevel}\nSafe Range: ${resolvedAlertData.safeRange}\nRecommended Action: ${resolvedAlertData.recommendedAction}\n${notes ? `Additional Notes: ${notes}` : ""}\n\nGenerated by Vitali-T - Maternal Health Monitoring`,
    title: `Vitali-T Alert: ${resolvedAlertData.alertType}`,
  };

  const handleMarkAsAcknowledged = async () => {
    if (isActionQueued) return;
    try {
      await updateAlert({
        userId: user?.userId as string,
        alertId: resolvedAlertData.alertId,
        data: {
          notes,
          acknowledged: true,
        },
      }).unwrap();

      setShowSuccessDialog(true);
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
    } catch (error: any) {
      if (error.message === "ACTION_QUEUED") {
        setShowSuccessDialog(true);
      } else {
        Toast.show({
          type: "error",
          text1: "Error",
          text2: "Failed to acknowledge alert.",
        });
      }
    }
  };

  const handleDialogDismiss = () => {
    setShowSuccessDialog(false);
    router.back();
  };

  if (isError) {
    Toast.show({
      type: "error",
      text1: "Error",
      text2: "Failed to load alert details.",
    });
  }

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: colors.background }}>
      <CustomAppBar
        title="Alert Details"
        rightAction="share"
        shareData={shareData}
      />
      <ScrollView
        style={{ flex: 1, paddingHorizontal: layout.spacing.sm }}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={{
          padding: layout.spacing.sm,
          paddingBottom: layout.spacing.lg,
        }}
      >
        {isFetching ? (
          <View
            style={{
              alignItems: "center",
              marginVertical: layout.spacing.lg,
            }}
          >
            <Text
              style={{
                fontSize: typo.body2.fontSize,
                color: colors.text,
                ...typo.body2,
              }}
            >
              Loading alert details...
            </Text>
          </View>
        ) : (
          <>
            <View
              style={{ alignItems: "center", marginBottom: layout.spacing.lg }}
            >
              <View
                style={{
                  width: 80,
                  height: 80,
                  borderRadius: layout.borderRadius.large,
                  backgroundColor: colors.errorLight,
                  justifyContent: "center",
                  alignItems: "center",
                  borderWidth: 2,
                  borderColor: colors.errorGradientStart,
                }}
              >
                <MaterialIcons name="warning" size={32} color={colors.error} />
              </View>
            </View>

            <Text
              style={{
                fontSize: typo.h5.fontSize,
                fontWeight: "600",
                color: colors.text,
                textAlign: "center",
                marginBottom: layout.spacing.sm,
                ...typo.h5,
              }}
            >
              {resolvedAlertData.alertType}
            </Text>
            <Text
              style={{
                fontSize: typo.h3.fontSize,
                fontWeight: "700",
                color: colors.error,
                textAlign: "center",
                marginBottom: layout.spacing.sm,
                ...typo.h3,
              }}
            >
              {resolvedAlertData.value}
            </Text>
            <Text
              style={{
                fontSize: typo.body2.fontSize,
                color: colors.text,
                textAlign: "center",
                marginBottom: layout.spacing.lg,
                ...typo.body2,
              }}
            >
              {new Date(resolvedAlertData.timestamp).toLocaleString()}
            </Text>

            <Card
              style={{
                marginBottom: layout.spacing.sm,
                backgroundColor: colors.card,
                elevation: layout.elevation,
              }}
            >
              <Card.Content
                style={{ flexDirection: "row", alignItems: "center" }}
              >
                <MaterialIcons
                  name="check-circle"
                  size={20}
                  color={colors.success}
                />
                <View style={{ marginLeft: layout.spacing.sm, flex: 1 }}>
                  <Text
                    style={{
                      fontSize: typo.body2.fontSize,
                      fontWeight: "600",
                      color: colors.text,
                      marginBottom: layout.spacing.xs,
                      ...typo.body2,
                    }}
                  >
                    Safe Range
                  </Text>
                  <Text
                    style={{
                      fontSize: typo.body3.fontSize,
                      color: colors.text,
                      ...typo.body3,
                    }}
                  >
                    {resolvedAlertData.safeRange}
                  </Text>
                </View>
              </Card.Content>
            </Card>

            <Card
              style={{
                marginBottom: layout.spacing.sm,
                backgroundColor: colors.card,
                elevation: layout.elevation,
              }}
            >
              <Card.Content
                style={{ flexDirection: "row", alignItems: "center" }}
              >
                <MaterialIcons
                  name="assessment"
                  size={20}
                  color={colors.warning}
                />
                <View style={{ marginLeft: layout.spacing.sm, flex: 1 }}>
                  <Text
                    style={{
                      fontSize: typo.body2.fontSize,
                      fontWeight: "600",
                      color: colors.text,
                      marginBottom: layout.spacing.xs,
                      ...typo.body2,
                    }}
                  >
                    Risk Level
                  </Text>
                  <Text
                    style={{
                      fontSize: typo.body3.fontSize,
                      color: colors.text,
                      ...typo.body3,
                    }}
                  >
                    {resolvedAlertData.riskLevel}
                  </Text>
                </View>
              </Card.Content>
            </Card>

            <Card
              style={{
                marginVertical: layout.spacing.sm,
                backgroundColor: colors.card,
                elevation: layout.elevation,
              }}
            >
              <Card.Content>
                <View
                  style={{
                    flexDirection: "row",
                    alignItems: "center",
                    marginBottom: layout.spacing.sm,
                  }}
                >
                  <MaterialIcons
                    name="lightbulb"
                    size={20}
                    color={colors.info}
                  />
                  <Text
                    style={{
                      fontSize: typo.body2.fontSize,
                      fontWeight: "600",
                      color: colors.text,
                      marginLeft: layout.spacing.sm,
                      ...typo.body2,
                    }}
                  >
                    Recommended Action
                  </Text>
                </View>
                <Text
                  style={{
                    fontSize: typo.body3.fontSize,
                    color: colors.text,
                    lineHeight: typo.body1.lineHeight,
                    ...typo.body3,
                  }}
                >
                  {resolvedAlertData.recommendedAction}
                </Text>
              </Card.Content>
            </Card>

            <View style={{ marginTop: layout.spacing.lg }}>
              <Text
                style={{
                  fontSize: typo.body2.fontSize,
                  fontWeight: "600",
                  color: colors.text,
                  marginBottom: layout.spacing.sm,
                  ...typo.body2,
                }}
              >
                Additional Notes
              </Text>
              <TextInput
                style={{
                  borderWidth: 1,
                  borderColor: colors.border,
                  borderRadius: layout.borderRadius.medium,
                  padding: layout.spacing.sm,
                  fontSize: typo.input.fontSize,
                  color: colors.text,
                  backgroundColor: colors.card,
                  minHeight: 100,
                  textAlignVertical: "top",
                  ...typo.input,
                }}
                placeholder="Add any relevant notes about this alert..."
                placeholderTextColor="rgba(17, 12, 9, 0.6)"
                value={notes}
                onChangeText={setNotes}
                multiline
                numberOfLines={4}
                editable={!isActionQueued && !resolvedAlertData.acknowledged}
              />
            </View>
          </>
        )}
      </ScrollView>

      {!resolvedAlertData.acknowledged && (
        <View
          style={{
            padding: layout.spacing.sm,
            paddingBottom: layout.spacing.lg,
            backgroundColor: colors.card,
            elevation: layout.elevation,
            shadowColor: colors.text,
            shadowOffset: layout.shadow.light.shadowOffset,
            shadowOpacity: layout.shadow.light.shadowOpacity,
            shadowRadius: layout.shadow.light.shadowRadius,
          }}
        >
          <Button
            mode="contained"
            style={{
              backgroundColor: colors.primary,
              borderRadius: layout.borderRadius.large,
              paddingVertical: layout.spacing.sm,
            }}
            labelStyle={{
              fontSize: typo.button.fontSize,
              fontWeight: "600",
              color: colors.textInverse,
              ...typo.button,
            }}
            onPress={handleMarkAsAcknowledged}
            disabled={isActionQueued || isUpdating}
            loading={isUpdating}
          >
            Mark as Acknowledged
          </Button>
        </View>
      )}

      <Portal>
        <Dialog
          visible={showSuccessDialog}
          onDismiss={handleDialogDismiss}
          style={{ backgroundColor: colors.card }}
        >
          <Dialog.Title
            style={{
              fontSize: typo.h4.fontSize,
              fontWeight: "600",
              color: colors.text,
              ...typo.h4,
            }}
          >
            Success
          </Dialog.Title>
          <Dialog.Content>
            <Text
              style={{
                fontSize: typo.body1.fontSize,
                color: colors.text,
                lineHeight: typo.body1.lineHeight,
                ...typo.body1,
              }}
            >
              {isActionQueued
                ? "Your alert acknowledgment has been queued and will be processed when you're back online."
                : "Alert has been successfully acknowledged."}
            </Text>
          </Dialog.Content>
          <Dialog.Actions>
            <Button
              onPress={handleDialogDismiss}
              textColor={colors.primary}
              disabled={isActionQueued}
            >
              OK
            </Button>
          </Dialog.Actions>
        </Dialog>
      </Portal>
    </SafeAreaView>
  );
};

export default AlertDetailsScreen;
